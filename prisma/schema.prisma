generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// App Logic Schema
model Course {
  id                String  @id @default(cuid())
  name              String  @db.Text
  organisationId    String  @unique
  owners            User[]  @relation("CourseOwners")
  students          User[]  @relation("CourseStudents")
  pages             Page[]
}

model Page {
  id                String  @id @default(cuid())
  name              String
  type              String
  courseId          String
  description       String
  course            Course  @relation(fields: [courseId], references: [id], onDelete: Cascade)
  assignments       Assignment[]
  deadline          String?
}

model Assignment {
  id                String  @id @default(cuid())
  userId            String
  user              User    @relation(fields: [userId], references: [id])
  pageId            String
  page              Page    @relation(fields: [pageId], references: [id], onDelete: Cascade) 
  status            String
  grade             String
}

// NextAuth Schema
model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  refresh_token_expires_in Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id              String    @id @default(cuid())
  name            String?
  bio             String? @db.Text
  age             Int?
  email           String?   @unique
  emailVerified   DateTime?
  image           String?
  accounts        Account[]
  sessions        Session[]
  ownedCourses    Course[]  @relation("CourseOwners")
  enrolledCourses Course[]  @relation("CourseStudents")
  assignments     Assignment[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}